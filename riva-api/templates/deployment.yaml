apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "riva-server.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "riva-server.name" . }}
    chart: {{ template "riva-server.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "riva-server.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "riva-server.name" . }}
        release: {{ .Release.Name }}
    spec:
      tolerations:
        - key: "nvidia.com/gpu"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      {{- if .Values.persistentVolumeClaim.usePVC }}
      securityContext:
        runAsGroup: 1000
        runAsUser: 1000
      {{- end }}
      initContainers:
        - name: clean-models
          image: busybox
          command: ['sh', '-c', 'rm -rf /data/models/*']
          volumeMounts:
            - mountPath: /data/models
              name: workdir
      containers:
        - name: riva-speech-api
          image: {{ template "server_image" . }}
          imagePullPolicy: {{ .Values.riva.pullPolicy }}
          {{- if .Values.modelRepoGenerator.useSeparateTriton }}
          command: ["/etc/start-riva-with-multiple-triton.sh"]
          {{- else }}
          {{- if not .Values.riva.visibleGpus }}
          resources:
            limits:
              nvidia.com/gpu: {{ .Values.riva.numGpus }}
          {{- end }}
          command: ["/opt/riva/bin/start-riva"]
          {{- end }}
          args:
            - "--asr_service=true"
            - "--nlp_service=true"
            - "--nmt_service=true"
            - "--tts_service=true"
            {{- if .Values.modelRepoGenerator.useSeparateTriton }}
            - "--triton_uri={{ include "joinListWithComma" (dict "root" .Values.modelRepoGenerator.ngcModelConfigs "prefix" "" "suffix" ":8001") }}"
            {{- end }}
          env:
            - name: TRTIS_MODEL_STORE
              value: "/data/models"
            - name: LD_PRELOAD
              value: "{{- join ":" .Values.riva.trtPlugins }}"
            {{- if .Values.riva.visibleGpus }}
            - name: NVIDIA_VISIBLE_DEVICES
              value: {{ .Values.riva.visibleGpus | quote }}
            {{- end }}
            {{- if .Values.rivaEnterprise.enabled }}
            - name: RIVA_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rivaEnterprise.ngcSecret}}
                  key: apikey
            - name: RIVA_API_NGC_ORG
              value: {{ .Values.rivaEnterprise.ngcOrg }}
            - name: RIVA_EULA
              value: {{- if .Values.rivaEnterprise.acceptEula}}"accept"{{- else }}"decline"{{- end }}
            {{- end }}
          ports:
            - containerPort: 50051
              name: speech-grpc
            {{- if not .Values.modelRepoGenerator.useSeparateTriton }}
            - containerPort: 8000
              name: http
            - containerPort: 8001
              name: grpc
            - containerPort: 8002
              name: metrics
            {{- end }}
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:50051"]
            initialDelaySeconds: 5
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:50051"]
            initialDelaySeconds: 10
            failureThreshold: 12
            periodSeconds: 10
          startupProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:50051"]
            initialDelaySeconds: 10
            failureThreshold: 12
            periodSeconds: 10
          volumeMounts:
            - mountPath: /data/
              name: workdir
            - mountPath: /dev/shm
              name: shm
            {{- if .Values.modelRepoGenerator.useSeparateTriton }}
            - mountPath: /etc/start-riva-with-multiple-triton.sh
              name: configmap-{{ template "riva-server.fullname" . }}
              subPath: start-riva-with-multiple-triton.sh
              readOnly: true
            {{- end }}
      imagePullSecrets:
        - name: {{ .Values.modelRepoGenerator.imagePullSecret }}
      volumes:
        - name: shm
          emptyDir:
            medium: Memory
        - name: workdir
          {{- if .Values.persistentVolumeClaim.usePVC }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistentVolumeClaim.workdirClaimName }}
          {{- else}}
          {{- if .Values.modelRepoGenerator.modelDeployVolume }}
{{ tpl (toYaml .Values.modelRepoGenerator.modelDeployVolume | indent 10) . }}
          {{- else }}
          emptyDir: {}
          {{- end }}
          {{- end}}
        {{- if .Values.modelRepoGenerator.useSeparateTriton }}
        - name: configmap-{{ template "riva-server.fullname" . }}
          configMap:
            name: configmap-{{ template "riva-server.fullname" . }}
            defaultMode: 0777
        {{- end }}
